generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum RoleEnum {
  ADMIN
  USER
}
enum PaymentStatusEnum {
  PENDING
  COMPLETED
  FAILED
}

enum SubscriptionStatusEnum {
  ACTIVE
  EXPIRED
  CANCELLED
}

model User {
  id       String  @id @default(uuid())
  username  String?
  name      String?
  role      RoleEnum @default(USER)
  telegram_id String @unique
  isActive  Boolean @default(true)
  subscriptions subscription[]
  invitedLinks invitedLink[]
  wallet wallet[]
  paymentHistories paymentHistory[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model wallet {
  id String @id @default(uuid())
  user User @relation(fields: [user_id], references: [id])
  user_id String
  amount Int
  isActive Boolean @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}


model subscriptionChannel{
  id String @id @default(uuid())
  name String
  telegram_id   String @unique
  subscribers subscription[]
  isActive Boolean @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model subscription{
  id String @id @default(uuid())
  user User @relation(fields: [user_id], references: [id])
  user_id String
  channel subscriptionChannel @relation(fields: [channel_id], references: [id])
  channel_id String
  duration Int @default(30)
   tier         SubscriptionTier      @relation(fields: [tier_id], references: [id])
  tier_id      String
  auto_renew   Boolean               @default(false)
  status       SubscriptionStatusEnum @default(ACTIVE)
  isActive Boolean @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model SubscriptionTier {
  id           String         @id @default(uuid())
  name         String
  price        Float
  description  String?
  subscriptions subscription[]
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
}

model invitedLink {
  id String @id @default(cuid())
  user User @relation(fields: [user_id], references: [id])
  user_id String
  link String @unique
  isActive Boolean @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model paymentHistory {
  id String @id @default(uuid())
  user User @relation(fields: [user_id], references: [id])
  user_id String
  amount Int
  status PaymentStatusEnum
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model invitedUser {
    id String @id @default(uuid())
    
    user_id String
    friendId String 
     created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}