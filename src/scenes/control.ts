import { Markup, Scenes } from "telegraf";
import prisma from "../../prisma/prisma";

const scene = new Scenes.BaseScene("control");

scene.hears("/start", async (ctx: any) => {
  return await ctx.scene.enter("start");
});

const ITEMS_PER_PAGE = 10; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ

scene.hears("–ü–æ–¥–ø–∏—Å–∫–∏", async (ctx) => {
  await showSubscriptions(ctx, 1); // –ù–∞—á–∏–Ω–∞–µ–º —Å 1-–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
});

scene.action(/^view_subscription_/, async (ctx: any) => {
  const subscriptionId = ctx.update.callback_query?.data.split("_")[2];

  console.log("–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥–ø–∏—Å–∫–∏", subscriptionId);
  const subscription = await prisma.subscription.findUnique({
    where: { id: subscriptionId },
    include: { channelBundle: { include: { channels: true } } },
  });

  if (!subscription || !subscription.endDate) {
    return ctx.answerCbQuery("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
  }

  let text = `üì¶ –ü–∞–∫–µ—Ç: ${subscription.channelBundle.name}\n\n`;
  text += `üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${subscription?.endDate.toLocaleDateString()}\n`;
  text += `‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${Math.ceil(
    (subscription?.endDate.getTime() - Date.now()) / (1000 * 60 * 60 * 24)
  )}\n\n`;
  text += `üì¢ –ö–∞–Ω–∞–ª—ã:\n`;

  const inlineKeyboard = [];

  for (let channel of subscription.channelBundle.channels) {
    let memberStatus;
    try {
      const chatMember = await ctx.telegram.getChatMember(
        channel.telegram_id,
        ctx.from.id
      );
      memberStatus = chatMember.status;
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞: ${error}`);
      memberStatus = "unknown";
    }

    const isSubscribed = ["creator", "administrator", "member"].includes(
      memberStatus
    );

    text += `- ${channel.name} ${isSubscribed ? "‚úÖ" : "‚ùå"}\n`;

    if (!isSubscribed) {
      try {
        const linkText = await ctx.telegram.createChatInviteLink(
          channel.telegram_id,
          {
            creates_join_request: true,
            name: `Join Request ${new Date().toISOString()}`,
          }
        );

        inlineKeyboard.push([
          Markup.button.url(
            `–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è: ${channel.name}`,
            linkText.invite_link
          ),
        ]);

        await prisma.invitedLink.create({
          data: {
            link: linkText.invite_link,
            user_id: subscription.user_id,
          },
        });
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏: ${error}`);
      }
    }
  }

  inlineKeyboard.push([
    Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_subscriptions"),
  ]);

  await ctx.editMessageText(text, Markup.inlineKeyboard(inlineKeyboard));
  await ctx.answerCbQuery();
});

// –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
scene.action(/^subscriptions_page_(\d+)$/, async (ctx: any) => {
  const page = ctx.update.callback_query?.data.split("_")[2];
  await showSubscriptions(ctx, page);
  await ctx.answerCbQuery();
});

// –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥
scene.action("back_to_subscriptions", async (ctx) => {
  ctx.deleteMessage();
  await showSubscriptions(ctx, 1);
  await ctx.answerCbQuery();
});

scene.action(/^view_bundle_/, async (ctx: any) => {
  // await ctx.deleteMessage();
  await ctx.answerCbQuery("–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!");
  const user_id = ctx.from?.id;

  const channelBundleId = ctx.update.callback_query?.data.split("_")[2];
  if (channelBundleId) {
    const channelBundle = await prisma.channelBundle.findFirst({
      where: {
        id: String(channelBundleId),
        active: true,
      },
      include: {
        channels: true,
      },
    });

    const subscription = await prisma.subscription.findFirst({
      where: {
        user: {
          telegram_id: ctx.from.id.toString(),
        },
        channelBundleId: channelBundleId,
        endDate: {
          gte: new Date(),
        },
        status: "ACTIVE",
      },
    });

    if (subscription) {
      return ctx.reply("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —ç—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∞");
    }
    if (channelBundle) {
      //   const bundleInfo = `
      // üì¶ –ü–∞–∫–µ—Ç: "${channelBundle.name}"

      // üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${channelBundle.description || "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}

      // üí∞ –¶–µ–Ω–∞: ${channelBundle.price} —Å—É–º

      // üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤: ${channelBundle.channels.length}

      // –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:
      // ${channelBundle.channels
      //   .map((channel: any, index: any) => `${index + 1}. ${channel.name}`)
      //   .join("\n")}
      // `;

      const bundleInfo = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! ‚ù§Ô∏è

    –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–æ–π –ø–æ–º–æ—â–Ω–∏–∫-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–ø—Ä–∞–≤–∏—Ç –≤–∞—Å –Ω–∞ –º–æ–π –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª ‚Äú ${channelBundle.channels
      .map((channel: any, index: any) => `${channel.name}`)
      .join("\n")}‚Äù ,
    
    –≥–¥–µ —è –±—É–¥—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –º–∞–∫–∏—è–∂–∏ , —Ä–∞–∑–Ω—É—é –∫–æ—Å–º–µ—Ç–∏–∫—É –∏ –º—ã –±—É–¥–µ–º —É—á–∏—Ç—å—Å—è –¥–µ–ª–∞—Ç—å —Å–µ–±–µ –∫—Ä–∞—Å–∏–≤–µ–π—à–∏–π –º–∞–∫–∏—è–∂‚ú®üòª
    
    –ü–æ–¥–ø–∏—Å–∫–∞ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ –∏ —Å–º–æ–∂–µ—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –µ–µ –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å‚ù§Ô∏è
    
    –¶–µ–Ω–∞ ${channelBundle.price} —Å—É–º
    
    –û–ø–ª–∞—Ç–∏—Ç—å ‚¨áÔ∏è`;
      const subscribeButton = {
        text: "–û–ø–ª–∞—Ç–∏—Ç—å ‚¨áÔ∏è",
        callback_data: `subscribe_${channelBundle.id}`,
      };

      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
      await ctx.telegram.sendMessage(user_id, `${bundleInfo}`, {
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [[subscribeButton]],
        },
      });

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID –ø–∞–∫–µ—Ç–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
      ctx.session.currentBundleId = channelBundle.id;
      // ctx.session.currentBundleId = bundleId;

      return;
      // return await ctx.scene.enter("subscribe");
    }
  }
});
scene.action(/^subscribe_/, async (ctx: any) => {
  return await ctx.scene.enter("subscribe");
});

// async function showSubscriptions(ctx: any, page: number) {
//   const user = await prisma.user.findFirst({
//     where: {
//       telegram_id: String(ctx.from.id),
//     },
//   });

//   if (!user) {
//     return ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤");
//   }

//   const totalSubscriptions = await prisma.subscription.count({
//     where: {
//       user_id: user.id,
//       status: "ACTIVE",
//     },
//   });

//   const subscriptions = await prisma.subscription.findMany({
//     where: {
//       user_id: user.id,
//       status: "ACTIVE",
//       channelBundle: {
//         active: true,
//       },
//     },
//     include: {
//       channelBundle: true,
//     },
//     skip: (page - 1) * ITEMS_PER_PAGE,
//     take: ITEMS_PER_PAGE,
//     orderBy: {
//       created_at: "asc",
//     },
//   });

//   if (subscriptions.length === 0) {
//     return ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫");
//   }

//   let text = "–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n";
//   const inlineKeyboard = [];

//   for (let [index, subscription] of subscriptions.entries()) {
//     const daysLeft = Math.ceil(
//       ((subscription?.endDate?.getTime() || new Date().getTime()) -
//         Date.now()) /
//         (1000 * 60 * 60 * 24)
//     );
//     text += `${(page - 1) * ITEMS_PER_PAGE + index + 1}. ${
//       subscription.channelBundle.name
//     }\n`;
//     text += `   –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${new Date(
//       subscription.endDate?.getTime() ||
//         subscription.created_at.getTime() + 30 * 86400 * 1000
//     ).toLocaleDateString()}\n`;
//     text += `   –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${daysLeft}\n\n`;

//     inlineKeyboard.push([
//       Markup.button.callback(
//         `üîç ${subscription.channelBundle.name}`,
//         `view_subscription_${subscription.id}`
//       ),
//     ]);
//   }

//   // –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
//   const paginationButtons = [];
//   if (page > 1) {
//     paginationButtons.push(
//       Markup.button.callback("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", `subscriptions_page_${page - 1}`)
//     );
//   }
//   if (page * ITEMS_PER_PAGE < totalSubscriptions) {
//     paginationButtons.push(
//       Markup.button.callback("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", `subscriptions_page_${page + 1}`)
//     );
//   }
//   if (paginationButtons.length > 0) {
//     inlineKeyboard.push(paginationButtons);
//   }

//   await ctx.reply(text, Markup.inlineKeyboard(inlineKeyboard));
// }
async function showSubscriptions(ctx: any, page: number) {
  const user = await prisma.user.findFirst({
    where: {
      telegram_id: String(ctx.from.id),
    },
  });

  if (!user) {
    return ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
  }

  const totalBundles = await prisma.channelBundle.count({
    where: {
      active: true,
    },
  });

  const bundles = await prisma.channelBundle.findMany({
    where: {
      active: true,
    },
    include: {
      subscriptions: {
        where: {
          user_id: user.id,
          status: "ACTIVE",
        },
      },
    },
    skip: (page - 1) * ITEMS_PER_PAGE,
    take: ITEMS_PER_PAGE,
    orderBy: {
      createdAt: "asc",
    },
  });

  if (bundles.length === 0) {
    return ctx.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –∫–∞–Ω–∞–ª–æ–≤");
  }

  let text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –∫–∞–Ω–∞–ª–æ–≤:\n\n";
  const inlineKeyboard = [];

  for (let [index, bundle] of bundles.entries()) {
    const isSubscribed = bundle?.subscriptions.length > 0;
    const subscription = isSubscribed ? bundle?.subscriptions[0] : null;

    text += `${(page - 1) * ITEMS_PER_PAGE + index + 1}. ${bundle.name} ${
      isSubscribed ? "‚úÖ" : "‚ùå"
    }\n`;
    text += `   –¶–µ–Ω–∞: ${bundle.price} —Å—É–º\n`;

    if (isSubscribed && subscription?.endDate) {
      const daysLeft = Math.ceil(
        (subscription.endDate.getTime() - Date.now()) / (1000 * 60 * 60 * 24)
      );
      text += `   –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${subscription.endDate.toLocaleDateString()}\n`;
      text += `   –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${daysLeft}\n`;
    }

    text += "\n";

    inlineKeyboard.push([
      Markup.button.callback(
        `üîç ${bundle.name}`,
        isSubscribed
          ? `view_subscription_${subscription?.id}`
          : `view_bundle_${bundle.id}`
      ),
    ]);
  }

  // –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  const paginationButtons = [];
  if (page > 1) {
    paginationButtons.push(
      Markup.button.callback("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", `subscriptions_page_${page - 1}`)
    );
  }
  if (page * ITEMS_PER_PAGE < totalBundles) {
    paginationButtons.push(
      Markup.button.callback("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", `subscriptions_page_${page + 1}`)
    );
  }
  if (paginationButtons.length > 0) {
    inlineKeyboard.push(paginationButtons);
  }

  await ctx.reply(text, Markup.inlineKeyboard(inlineKeyboard));
}

async function showPaymentHistory(ctx: any, page: number) {
  const user = await prisma.user.findFirst({
    where: {
      telegram_id: String(ctx.from.id),
    },
    include: {
      transactions: {
        where: {
          status: "COMPLETED",
        },
        orderBy: {
          created_at: "desc",
        },
        skip: (page - 1) * ITEMS_PER_PAGE,
        take: ITEMS_PER_PAGE,
      },
    },
  });

  if (!user || user.transactions.length === 0) {
    return ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π");
  }

  const totalPayments = await prisma.transaction.count({
    where: {
      userId: user.id,
      status: "COMPLETED",
    },
  });

  let text = "–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:\n\n";
  const inlineKeyboard = [];

  for (let [index, payment] of user.transactions.entries()) {
    text += `${(page - 1) * ITEMS_PER_PAGE + index + 1}. ${
      payment.amount
    } —Å—É–º - ${payment.created_at.toLocaleString()}\n`;
  }

  // –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  const paginationButtons = [];
  if (page > 1) {
    paginationButtons.push(
      Markup.button.callback(
        "‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è",
        `payment_history_page_${page - 1}`
      )
    );
  }
  if (page * ITEMS_PER_PAGE < totalPayments) {
    paginationButtons.push(
      Markup.button.callback("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", `payment_history_page_${page + 1}`)
    );
  }
  if (paginationButtons.length > 0) {
    inlineKeyboard.push(paginationButtons);
  }

  inlineKeyboard.push([Markup.button.callback("–ù–∞–∑–∞–¥", "back_to_start")]);

  await ctx.reply(text, Markup.inlineKeyboard(inlineKeyboard));
}

scene.hears("–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π", async (ctx) => {
  await showPaymentHistory(ctx, 1); // –ù–∞—á–∏–Ω–∞–µ–º —Å 1-–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
});

scene.action(/^payment_history_page_(\d+)$/, async (ctx: any) => {
  const page = ctx.update.callback_query?.data.split("_")[3];
  await showPaymentHistory(ctx, page);
  await ctx.answerCbQuery();
});

scene.hears("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", async (ctx: any) => {
  const notification = ctx.session.notification || false;

  const notificationText = notification
    ? "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã"
    : "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã";
  ctx.reply("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", {
    reply_markup: {
      inline_keyboard: [
        [Markup.button.callback(notificationText, "toggle_notification")],
        [Markup.button.callback("–ù–∞–∑–∞–¥", "back_to_start")],
      ],
    },
  });
});

scene.action("toggle_notification", async (ctx: any) => {
  ctx.session.notification = !ctx.session.notification;
  ctx.editMessageReplyMarkup({
    inline_keyboard: [
      [
        Markup.button.callback(
          ctx.session.notification
            ? "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã"
            : "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã",
          "toggle_notification"
        ),
      ],
      [Markup.button.callback("–ù–∞–∑–∞–¥", "back_to_start")],
    ],
  });
});

scene.action("back_to_start", async (ctx: any) => {
  ctx.deleteMessage();
  await ctx.scene.enter("start");
});

export default scene;
