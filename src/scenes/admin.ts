import { Markup, Scenes } from "telegraf";
import prisma from "../../prisma/prisma";
import bot from "../core/bot";
const ExcelJS = require("exceljs");
const scene = new Scenes.BaseScene("admin");

scene.hears("/start", async (ctx: any) => {
  return await ctx.scene.enter("start");
});

scene.hears("–ù–∞–∑–∞–¥", async (ctx: any) => {
  return await ctx.scene.enter("start");
});
scene.hears("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", async (ctx) => {
  const userId = ctx.from.id;

  try {
    const user = await prisma.user.findUnique({
      where: { telegram_id: userId.toString() },
    });

    if (!user || user.role !== "ADMIN") {
      return ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.");
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const [
      totalUsers,
      totalMerchants,
      totalChannels,
      totalSubscriptions,
      activeSubscriptions,
      totalRevenue,
    ] = await Promise.all([
      prisma.user.count(),
      prisma.user.count({ where: { role: "MERCHANT" } }),
      prisma.channel.count(),
      prisma.subscription.count(),
      prisma.subscription.count({ where: { status: "ACTIVE" } }),
      prisma.subscription.aggregate({
        _sum: { price: true },
        where: { status: "ACTIVE" },
      }),
    ]);

    const message = `
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:

üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}
üõçÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π-–º–µ—Ä—á–∞–Ω—Ç–æ–≤: ${totalMerchants}
üì° –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤: ${totalChannels}

üìå –ü–æ–¥–ø–∏—Å–∫–∏:
   üìù –í—Å–µ–≥–æ: ${totalSubscriptions}
   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${activeSubscriptions}

üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: ${totalRevenue._sum.price || 0} —Å—É–º

üìÖ –î–∞—Ç–∞: ${new Date().toLocaleString()}
    `;

    ctx.reply(message, {
      reply_markup: {
        keyboard: [[{ text: "–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" }], [{ text: "–ù–∞–∑–∞–¥" }]],
        resize_keyboard: true,
      },
    });
  } catch (error) {
    console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", error);
    ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
});

scene.hears("–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", async (ctx) => {
  const userId = ctx.from.id;

  try {
    const user = await prisma.user.findUnique({
      where: { telegram_id: userId.toString() },
    });

    if (!user || user.role !== "ADMIN") {
      return ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.");
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –ø–æ–¥–ø–∏—Å–æ–∫
    const recentSubscriptions = await prisma.subscription.findMany({
      take: 5,
      orderBy: { created_at: "desc" },
      include: { user: true, channelBundle: true },
    });

    let message = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ–¥–ø–∏—Å–æ–∫:\n\n";

    for (const sub of recentSubscriptions) {
      message += `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${sub.user.username || sub.user.name}\n`;
      message += `üì¶ –ü–∞–∫–µ—Ç: ${sub.channelBundle.name}\n`;
      message += `üí≤ –¶–µ–Ω–∞: ${sub.price} —Å—É–º\n`;
      message += `üìÖ –î–∞—Ç–∞: ${sub.created_at.toLocaleString()}\n\n`;
    }

    // –¢–æ–ø 3 –º–µ—Ä—á–∞–Ω—Ç–∞
    const topMerchants = await prisma.user.findMany({
      where: { role: "MERCHANT" },
      take: 3,
      orderBy: {
        subscriptions: {
          _count: "desc",
        },
      },
      include: {
        _count: {
          select: { subscriptions: true },
        },
      },
    });

    ctx.reply(message);
  } catch (error) {
    console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", error);
    ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
});

scene.hears("–°–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤", async (ctx) => {
  await showBundles(ctx, 1); // –ù–∞—á–∏–Ω–∞–µ–º —Å 1-–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
});

bot.hears("–°–ø–∏—Å–æ–∫ –ø–ª–∞—Ç–µ–∂–µ–π", async (ctx) => {
  try {
    // To'lov qilingan tranzaksiyalarni olish
    const completedTransactions = await prisma.transaction.findMany({
      where: {
        status: "COMPLETED",
      },
      include: {
        user: true,
        subscription: {
          include: {
            channelBundle: true,
          },
        },
      },
    });

    // Excel fayl yaratish
    const workbook = new ExcelJS.Workbook();
    const worksheet = workbook.addWorksheet("Completed Payments");

    // Ustunlar qo'shish
    worksheet.columns = [
      { header: "Transaction ID", key: "id", width: 36 },
      { header: "User", key: "user", width: 20 },
      { header: "Amount", key: "amount", width: 15 },
      { header: "Channel Bundle", key: "channelBundle", width: 30 },
      { header: "Date", key: "date", width: 20 },
    ];

    // Ma'lumotlarni Excel fayliga yozish
    completedTransactions.forEach((transaction) => {
      worksheet.addRow({
        id: transaction.id,
        user:
          transaction.user.name ||
          transaction.user.username ||
          transaction.user.telegram_id,
        amount: transaction.amount,
        channelBundle: transaction.subscription.channelBundle.name,
        date: transaction.created_at.toLocaleString(),
      });
    });

    // Excel faylini saqlash
    const buffer = await workbook.xlsx.writeBuffer();

    // Faylni foydalanuvchiga yuborish
    await ctx.replyWithDocument(
      {
        source: buffer,
        filename: "completed_payments.xlsx",
      },
      {
        caption: "To'lov qilingan tranzaksiyalar ro'yxati",
      }
    );
  } catch (error) {
    console.error("Error generating payments report:", error);
    await ctx.reply(
      "Hisobot tayyorlashda xatolik yuz berdi. Iltimos, keyinroq qayta urinib ko'ring."
    );
  }
});
// –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
scene.action(/^bundles_page_(\d+)$/, async (ctx) => {
  const page = parseInt(ctx.match[1]);
  await showBundles(ctx, page);
  await ctx.answerCbQuery();
});

const USERS_PER_PAGE = 10; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ

scene.hears("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", async (ctx) => {
  await showUsersList(ctx, 1); // –ù–∞—á–∏–Ω–∞–µ–º —Å 1-–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
});

scene.action(/^users_list_page_(\d+)$/, async (ctx: any) => {
  const page = parseInt(ctx.match[1]);
  await showUsersList(ctx, page);
  await ctx.answerCbQuery();
});

async function showUsersList(ctx: any, page: number) {
  const totalUsers = await prisma.user.count();
  const activeSubscriptions = await prisma.subscription.count({
    where: { status: "ACTIVE" },
  });
  const totalTransactions = await prisma.transaction.count({
    where: { status: "COMPLETED" },
  });

  const users = await prisma.user.findMany({
    skip: (page - 1) * USERS_PER_PAGE,
    take: USERS_PER_PAGE,
    orderBy: { created_at: "desc" },
    include: {
      subscriptions: {
        where: { status: "ACTIVE" },
      },
      transactions: {
        where: { status: "COMPLETED" },
      },
    },
  });

  let text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n";
  text += `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}\n`;
  text += `üîî –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: ${activeSubscriptions}\n`;
  text += `üí≥ –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: ${totalTransactions}\n\n`;
  text += "üë§ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n";

  for (const [index, user] of users.entries()) {
    const userNumber = (page - 1) * USERS_PER_PAGE + index + 1;
    text += `${userNumber}. ${user.name || user.telegram_id}\n`;
    text += `   üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${user.created_at.toLocaleDateString()}\n`;
    text += `   üí≥ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç–µ–∂–µ–π: ${user.transactions.length}\n\n`;
  }

  const totalPages = Math.ceil(totalUsers / USERS_PER_PAGE);
  const paginationKeyboard = [];

  if (page > 1) {
    paginationKeyboard.push(
      Markup.button.callback("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", `users_list_page_${page - 1}`)
    );
  }
  if (page < totalPages) {
    paginationKeyboard.push(
      Markup.button.callback("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", `users_list_page_${page + 1}`)
    );
  }

  const keyboard = Markup.inlineKeyboard([
    [...paginationKeyboard],
    [Markup.button.callback("üîô –ù–∞–∑–∞–¥", "back_to_start")],
  ]);

  if (ctx.updateType === "callback_query") {
    await ctx.editMessageText(text, keyboard);
  } else {
    await ctx.reply(text, keyboard);
  }
}

scene.action("back_to_start", async (ctx: any) => {
  await ctx.scene.enter("start");
  await ctx.answerCbQuery();
});

const TRANSACTIONS_PER_PAGE = 10; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ

scene.hears("–°–ø–∏—Å–æ–∫ –ø–ª–∞—Ç–µ–∂–µ–π", async (ctx) => {
  await showTransactionsList(ctx, 1); // –ù–∞—á–∏–Ω–∞–µ–º —Å 1-–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
});

scene.action(/^transactions_list_page_(\d+)$/, async (ctx: any) => {
  const page = parseInt(ctx.match[1]);
  await showTransactionsList(ctx, page);
  await ctx.answerCbQuery();
});

async function showTransactionsList(ctx: any, page: number) {
  const totalTransactions = await prisma.transaction.count();
  const activeTransactions = await prisma.transaction.count({
    where: { status: "PENDING" },
  });
  const completedTransactions = await prisma.transaction.count({
    where: { status: "COMPLETED" },
  });

  const transactions = await prisma.transaction.findMany({
    skip: (page - 1) * TRANSACTIONS_PER_PAGE,
    take: TRANSACTIONS_PER_PAGE,
    orderBy: { created_at: "desc" },
    include: {
      user: true,
    },
  });

  let text = "üí≥ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π:\n\n";
  text += `üìä –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: ${totalTransactions}\n`;
  text += `‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏: ${activeTransactions}\n`;
  text += `üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏: ${completedTransactions}\n\n`;
  text += "üßæ –°–ø–∏—Å–æ–∫ –ø–ª–∞—Ç–µ–∂–µ–π:\n\n";

  for (const [index, transaction] of transactions.entries()) {
    const transactionNumber = (page - 1) * TRANSACTIONS_PER_PAGE + index + 1;
    text += `${transactionNumber}. ID: ${transaction.id}\n`;
    text += `   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${
      transaction.user.name || transaction.user.telegram_id
    }\n`;
    text += `   üí∞ –°—É–º–º–∞: ${transaction.amount} —Å—É–º\n`;
    text += `   üìÖ –î–∞—Ç–∞: ${transaction.created_at.toLocaleString()}\n`;
    text += `   üìä –°—Ç–∞—Ç—É—Å: ${
      transaction.status === "COMPLETED"
        ? "‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π"
        : transaction.status === "PENDING"
        ? "‚ú¥Ô∏è –û–∂–∏–¥–∞–µ—Ç"
        : "‚ùå –û—Ç–º–µ–Ω–µ–Ω"
    }\n\n`;
  }

  const totalPages = Math.ceil(totalTransactions / TRANSACTIONS_PER_PAGE);
  const paginationKeyboard = [];

  if (page > 1) {
    paginationKeyboard.push(
      Markup.button.callback(
        "‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è",
        `transactions_list_page_${page - 1}`
      )
    );
  }
  if (page < totalPages) {
    paginationKeyboard.push(
      Markup.button.callback(
        "–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è",
        `transactions_list_page_${page + 1}`
      )
    );
  }

  const keyboard = Markup.inlineKeyboard([
    [...paginationKeyboard],
    [Markup.button.callback("üîô –ù–∞–∑–∞–¥", "back_to_start")],
  ]);

  if (ctx.updateType === "callback_query") {
    await ctx.editMessageText(text, keyboard);
  } else {
    await ctx.reply(text, keyboard);
  }
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–±–æ—Ä–µ
scene.action(/^view_bundle_/, async (ctx: any) => {
  console.log(ctx.update.callback_query.data, "—á—Ç–æ-—Ç–æ");
  const bundleId = ctx.update.callback_query.data.split("_")[2];

  try {
    const bundle = await prisma.channelBundle.findUnique({
      where: { id: bundleId },
      include: { channels: true },
    });

    if (!bundle) {
      return ctx.answerCbQuery("–ù–∞–±–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    const botUsername = ctx.botInfo?.username || ctx.me;
    const shareUrl = `https://t.me/${botUsername}?start=${bundle.id}`;
    let text = `üì¶ –ù–∞–±–æ—Ä: ${bundle.name}\n\n`;
    text += `üí∞ –¶–µ–Ω–∞: ${bundle.price} —Å—É–º\n`;
    text += `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${bundle.description || "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}\n\n`;
    text += `URL –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–∞–Ω–∞–ª–∞–º: ${shareUrl}\n`; //share url
    text += `üì¢ –ö–∞–Ω–∞–ª—ã (${bundle.channels.length}):\n`;
    bundle.channels.forEach((channel: any, index: number) => {
      text += `${index + 1}. ${channel.name} - ${channel.telegram_id}\n`;
    });

    const inlineKeyboard = [
      [Markup.button.callback("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", `edit_bundle_${bundleId}`)],
      [Markup.button.callback("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", `delete_bundle_${bundleId}`)],
      [Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_bundles")],
    ];

    await ctx.editMessageText(text, Markup.inlineKeyboard(inlineKeyboard));
    await ctx.answerCbQuery();
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ view_bundle:", error);
    await ctx.answerCbQuery(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    );
  }
});

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞
scene.action(/^edit_bundle_/, async (ctx: any) => {
  console.log(ctx.update.callback_query.data, "edit —á—Ç–æ-—Ç–æ");
  const bundleId = ctx.update.callback_query.data.split("_")[2];

  console.log(bundleId, "bundleId");

  ctx.session.bundleId = bundleId;
  ctx.scene.enter("editBundle", { bundleId });
  await ctx.answerCbQuery();
});

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞
scene.action("create_new_bundle", async (ctx: any) => {
  ctx.scene.enter("createBundle");
  await ctx.answerCbQuery();
});

// To'plamni o'chirish
scene.action(/^delete_bundle_/, async (ctx: any) => {
  const bundleId = ctx.update.callback_query.data.split("_")[2];

  try {
    await prisma.channelBundle.delete({
      where: { id: bundleId },
    });

    await ctx.answerCbQuery("–ù–∞–±–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω");
    await showBundles(ctx, 1);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ delete_bundle:", error);
    await ctx.answerCbQuery(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–±–æ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    );
  }
});

// –í–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥
scene.action("back_to_bundles", async (ctx) => {
  await showBundles(ctx, 1);
  await ctx.answerCbQuery();
});

export async function showBundles(ctx: any, page: number) {
  const ITEMS_PER_PAGE = 5;
  const merchantUserId = ctx.from.id;

  try {
    const merchantUser = await prisma.user.findFirst({
      where: {
        telegram_id: String(merchantUserId),
        role: "ADMIN",
      },
    });

    if (!merchantUser) {
      return ctx.reply("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º-–º–µ—Ä—á–∞–Ω—Ç–æ–º");
    }

    const totalBundles = await prisma.channelBundle.count({
      where: {
        active: true,
      },
    });

    const bundles = await prisma.channelBundle.findMany({
      where: {
        active: true,
      },
      skip: (page - 1) * ITEMS_PER_PAGE,
      take: ITEMS_PER_PAGE,

      include: { channels: true },
    });

    if (bundles.length === 0 && page === 1) {
      const inlineKeyboard = [
        [Markup.button.callback("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä", "create_new_bundle")],
      ];
      return ctx.reply(
        "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–±–æ—Ä–æ–≤. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä', —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä.",
        Markup.inlineKeyboard(inlineKeyboard)
      );
    }

    let text = "üì¶ –í–∞—à–∏ –Ω–∞–±–æ—Ä—ã:\n\n";
    const inlineKeyboard = [];

    bundles.forEach((bundle: any, index: any) => {
      text += `${(page - 1) * ITEMS_PER_PAGE + index + 1}. ${bundle.name}\n`;
      text += `   üí∞ –¶–µ–Ω–∞: ${bundle.price} —Å—É–º\n`;
      text += `   üì¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤: ${bundle.channels.length}\n\n`;

      inlineKeyboard.push([
        Markup.button.callback(`üîç –ü—Ä–æ—Å–º–æ—Ç—Ä`, `view_bundle_${bundle.id}`),
        Markup.button.callback(`‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å`, `edit_bundle_${bundle.id}`),
      ]);
    });

    // –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const paginationButtons = [];
    if (page > 1) {
      paginationButtons.push(
        Markup.button.callback("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", `bundles_page_${page - 1}`)
      );
    }
    if (page * ITEMS_PER_PAGE < totalBundles) {
      paginationButtons.push(
        Markup.button.callback("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", `bundles_page_${page + 1}`)
      );
    }
    if (paginationButtons.length > 0) {
      inlineKeyboard.push(paginationButtons);
    }

    // –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞
    inlineKeyboard.push([
      Markup.button.callback("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä", "create_new_bundle"),
    ]);

    await ctx.reply(text, Markup.inlineKeyboard(inlineKeyboard));
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ showBundles:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
  }
}

scene.hears("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", async (ctx: any) => {
  await ctx.reply(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:",
    Markup.inlineKeyboard([
      [Markup.button.callback("–í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", "send_to_all")],
      [Markup.button.callback("–û—Ç–¥–µ–ª—å–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", "send_to_one")],
      [Markup.button.callback("üîô –ù–∞–∑–∞–¥", "back_to_start")],
    ])
  );

  ctx.scene.enter("sendMessage");
});

scene.action(/^delete_bundle_/, async (ctx: any) => {
  const bundleId = ctx.update.callback_query.data.split("_")[2];

  try {
    // Confirm deletion
    await ctx.answerCbQuery();
    await ctx.reply(
      "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –Ω–∞–±–æ—Ä? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
      Markup.inlineKeyboard([
        [Markup.button.callback("–î–∞, —É–¥–∞–ª–∏—Ç—å", `confirm_delete_${bundleId}`)],
        [Markup.button.callback("–û—Ç–º–µ–Ω–∞", "cancel_delete")],
      ])
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ delete_bundle:", error);
    await ctx.answerCbQuery(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    );
  }
});

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
scene.action(/^confirm_delete_/, async (ctx: any) => {
  const bundleId = ctx.update.callback_query.data.split("_")[2];

  try {
    // Delete the bundle
    await prisma.channelBundle.update({
      where: { id: bundleId },
      data: {
        active: false,
      },
    });

    await ctx.answerCbQuery("–ù–∞–±–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω");
    await ctx.reply("–ù–∞–±–æ—Ä –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.");
    await showBundles(ctx, 1);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–±–æ—Ä–∞:", error);
    await ctx.answerCbQuery(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–±–æ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    );
  }
});

// –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è
scene.action("cancel_delete", async (ctx: any) => {
  await ctx.answerCbQuery("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ");
  await ctx.reply("–£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
  await showBundles(ctx, 1);
});
// –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º

export default scene;
